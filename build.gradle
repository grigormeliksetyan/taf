buildscript {

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "io.qameta.allure:allure-gradle:2.8.1"
    }
}

plugins {
    id 'java'
    id "io.qameta.allure" version '2.8.1'
}

subprojects { subproject ->

    apply plugin: "java"

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        implementation group: 'org.springframework', name: 'spring-web', version: '5.2.9.RELEASE'
        implementation group: 'org.springframework', name: 'spring-context', version: '5.2.9.RELEASE'
        implementation group: 'org.springframework', name: 'spring-test', version: '5.2.9.RELEASE'
        implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
        implementation("org.junit.jupiter:junit-jupiter-api:5.6.1")
        implementation("org.junit.jupiter:junit-jupiter-params:5.6.1")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.6.1")
        implementation("org.apache.logging.log4j:log4j-core:2.7")
        implementation("org.apache.commons:commons-lang3:3.0")
        implementation("org.apache.httpcomponents:httpclient:4.5.13")
        implementation("io.qameta.allure:allure-java-commons:2.7.0")
        implementation('io.qameta.allure:allure-httpclient:2.13.7')
        compile('com.fasterxml.jackson.core:jackson-databind:2.11.2')
        compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.2')
        implementation 'com.google.code.findbugs:jsr305:3.0.2'
        compileOnly 'org.projectlombok:lombok:1.18.16'
        annotationProcessor 'org.projectlombok:lombok:1.18.16'
        testCompileOnly 'org.projectlombok:lombok:1.18.16'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.16'
    }

    tasks.withType(Javadoc) {
        options.links(
                'http://docs.oracle.com/javase/7/docs/api/',
                'http://docs.groovy-lang.org/latest/html/api/',
                'https://gradle.org/docs/current/javadoc/'
        )
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from subproject.sourceSets.main.allSource
    }

    test {
        useJUnitPlatform() {
        }
        testLogging.showStandardStreams = true
    }

    tasks.withType(Test).configureEach {
        outputs.upToDateWhen { false }
        testLogging.showStandardStreams = true
        reports.junitXml.destination = file("$projectDir/allure-results/junit/xml")
        reports.html.destination = file("$projectDir/allure-results/junit/html")
        maxHeapSize = '1G'
    }

    allure {
        autoconfigure = true
        version = '2.7.0'
        useJUnit5 {
            version = '2.7.0'
        }
        resultsDir = file("$projectDir/allure-results")
        reportDir = file("$projectDir/allure-results")
    }

    defaultTasks "clean", "build"
}

group 'typicode'
version '1.0-SNAPSHOT'

sourceCompatibility = 11

repositories {
    mavenCentral()
    jcenter()
}

task resolveDependencies(type: Task) {
    doLast {
        rootProject.allprojects { project ->
            project.buildscript.configurations.forEach { configuration ->
                if (configuration.isCanBeResolved()) {
                    configuration.resolve()
                }
            }

            project.configurations.forEach { configuration ->
                if (configuration.isCanBeResolved()) {
                    configuration.resolve()
                }
            }
        }
    }
}
